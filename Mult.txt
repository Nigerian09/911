Multithreading
i)
import java.util.Scanner;
class DatasetCalculator implements Runnable {
    private int datasetId;
    private int[] numbers;
    public DatasetCalculator(int datasetId, int[] numbers) {
        this.datasetId = datasetId;
        this.numbers = numbers;
    }
    public void run() {
        int sum = 0;
        for (int num : numbers) {
            sum += num;
        }
        double average = (double) sum / numbers.length;
        System.out.printf("Result for dataset %d: Sum = %d, Average = %.2f%n", datasetId, sum, average);
    }
}
public class DataAnalysisMultithreading {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int s = scanner.nextInt();
        for (int i = 0; i < s; i++) 
        {
            int datasetId = scanner.nextInt();
            int numValues = scanner.nextInt();
            int[] numbers = new int[numValues];
            for (int j = 0; j < numValues; j++) 
            {
                numbers[j] = scanner.nextInt();
            }
            Thread thread = new Thread(new DatasetCalculator(datasetId, numbers));
            thread.start();
            try 
            {
                thread.join();
            } 
            catch (InterruptedException e)
            {
                System.out.println("Thread interrupted: " + e.getMessage());
            }
        }
    }
}
//Input:
2
1
3
10 20 30
2
4
5 15 25 35

//Output:
Result for dataset 1: Sum = 60, Average = 20.00
Result for dataset 2: Sum = 80, Average = 20.00

ii)
import java.util.*;
class TicketBookingSystem {
    private int totalTickets;
    public TicketBookingSystem(int totalTickets) {
        this.totalTickets = totalTickets;
    }
    public synchronized void bookTicket(int userId, int ticketsRequested) {
        if (ticketsRequested <= totalTickets) {
            totalTickets -= ticketsRequested;
            System.out.println("User " + userId + ": Booking Success for " + ticketsRequested + " tickets.");
        } else {
            System.out.println("User " + userId + ": Booking Failed. Not enough tickets available.");
        }
    }
    public int getRemainingTickets() {
        return totalTickets;
    }
}
class UserBooking implements Runnable {
    private TicketBookingSystem bookingSystem;
    private int userId;
    private int ticketsRequested;
    public UserBooking(TicketBookingSystem bookingSystem, int userId, int ticketsRequested) {
        this.bookingSystem = bookingSystem;
        this.userId = userId;
        this.ticketsRequested = ticketsRequested;
    }
    public void run() {
        bookingSystem.bookTicket(userId, ticketsRequested);
    }
}
class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int totalTickets = scanner.nextInt();
        int numUsers = scanner.nextInt();
        TicketBookingSystem bookingSystem = new TicketBookingSystem(totalTickets);
        Thread[] threads = new Thread[numUsers];
        for (int i = 0; i < numUsers; i++) {
            int userId = scanner.nextInt();
            int ticketsRequested = scanner.nextInt();
            threads[i] = new Thread(new UserBooking(bookingSystem, userId, ticketsRequested));
            threads[i].start();
        }
        for (int i = 0; i < numUsers; i++) {
            try {
                threads[i].join();
            } catch (InterruptedException e) {
                System.out.println("Thread interrupted: " + e.getMessage());
            }
        }
        System.out.println("Remaining tickets: " + bookingSystem.getRemainingTickets());
    }
}

//Input:
10
3
1 5
2 4 
3 3

//Output:
User 1: Booking Success for 5 tickets.
User 3: Booking Success for 3 tickets.
User 2: Booking Failed. Not enough tickets available.
Remaining tickets: 2

iii)
import java.util.*;
class FileProcessor {
    private String filename;
    private String content;
    public FileProcessor(String filename, String content) {
        this.filename = filename;
        this.content = content;
    }
    public void processFile() {
        Thread readThread = new Thread(() -> read());
        Thread transformThread = new Thread(() -> transform());
        Thread saveThread = new Thread(() -> save());
        try {
            readThread.start();
            readThread.join();
            transformThread.start();
            transformThread.join();
            saveThread.start();
            saveThread.join();
        } catch (InterruptedException e) {
            System.out.println("Processing interrupted for file: " + filename);
        }
    }
    private void read() {
        System.out.println("Reading file: " + filename);
    }
    private void transform() {
        content = content.toUpperCase();
        System.out.println("Transforming content for file: " + filename);
    }
    private void save() {
        System.out.println("Saving file: " + filename + " with content: " + content);
    }
}
class Main {
    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int m = obj.nextInt();
        obj.nextLine();
        for (int i = 0; i < m; i++) {
            String filename = obj.nextLine();
            String content = obj.nextLine();
            FileProcessor processor = new FileProcessor(filename, content);
            processor.processFile();
        }
    }
}
//Input:
2
java1.txt
hello world
java2.txt
multithreading
//Output:
Reading file: java1.txt
Transforming content for file: java1.txt
Saving file: java1.txt with content: HELLO WORLD
Reading file: java2.txt
Transforming content for file: java2.txt
Saving file: java2.txt with content: MULTITHREADING